{
  "title": "Wormhole.com Overview",
  "create_time": 1753179972.090471,
  "update_time": 1753179995.821963,
  "mapping": {
    "71f34b48-e8bd-40c9-95b1-d08a314ef885": {
      "id": "71f34b48-e8bd-40c9-95b1-d08a314ef885",
      "message": null,
      "parent": null,
      "children": [
        "42002379-ca4b-4723-bbda-9cdb8b689408"
      ]
    },
    "42002379-ca4b-4723-bbda-9cdb8b689408": {
      "id": "42002379-ca4b-4723-bbda-9cdb8b689408",
      "message": {
        "id": "42002379-ca4b-4723-bbda-9cdb8b689408",
        "author": {
          "role": "system",
          "name": null,
          "metadata": {}
        },
        "create_time": null,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            ""
          ]
        },
        "status": "finished_successfully",
        "end_turn": true,
        "weight": 0.0,
        "metadata": {
          "is_visually_hidden_from_conversation": true
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "71f34b48-e8bd-40c9-95b1-d08a314ef885",
      "children": [
        "b0a9f244-cad1-4e8a-8676-868b96264c36"
      ]
    },
    "b0a9f244-cad1-4e8a-8676-868b96264c36": {
      "id": "b0a9f244-cad1-4e8a-8676-868b96264c36",
      "message": {
        "id": "b0a9f244-cad1-4e8a-8676-868b96264c36",
        "author": {
          "role": "system",
          "name": null,
          "metadata": {}
        },
        "create_time": 1753179971.2997346,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            ""
          ]
        },
        "status": "finished_successfully",
        "end_turn": null,
        "weight": 1.0,
        "metadata": {
          "attachments": [
            {
              "id": "file-DTG9WjmnoMGYDKT8uVCfiv",
              "name": "wormhole.txt",
              "mimeType": "text/plain",
              "fileSizeTokens": 262119
            }
          ],
          "is_visually_hidden_from_conversation": true
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "42002379-ca4b-4723-bbda-9cdb8b689408",
      "children": [
        "bbb21ea7-5244-4cbc-afac-64b065ea9c64"
      ]
    },
    "bbb21ea7-5244-4cbc-afac-64b065ea9c64": {
      "id": "bbb21ea7-5244-4cbc-afac-64b065ea9c64",
      "message": {
        "id": "bbb21ea7-5244-4cbc-afac-64b065ea9c64",
        "author": {
          "role": "user",
          "name": null,
          "metadata": {}
        },
        "create_time": 1753179971.303649,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            "Explain what Wormhole.com offers"
          ]
        },
        "status": "finished_successfully",
        "end_turn": null,
        "weight": 1.0,
        "metadata": {
          "content_references": [],
          "search_result_groups": [],
          "search_queries": [],
          "image_results": [],
          "gizmo_id": "g-67f49d3619948191a1baf7b46c1bda18",
          "real_time_audio_has_video": false,
          "dictation": false,
          "image_gen_async": false,
          "trigger_async_ux": false,
          "request_id": "96323d027ad212ee-ATL",
          "message_source": null,
          "timestamp_": "absolute"
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "b0a9f244-cad1-4e8a-8676-868b96264c36",
      "children": [
        "ef669fa2-ee0e-4c75-8a6f-c1c0f9d0b6e0"
      ]
    },
    "ef669fa2-ee0e-4c75-8a6f-c1c0f9d0b6e0": {
      "id": "ef669fa2-ee0e-4c75-8a6f-c1c0f9d0b6e0",
      "message": {
        "id": "ef669fa2-ee0e-4c75-8a6f-c1c0f9d0b6e0",
        "author": {
          "role": "tool",
          "name": "file_search",
          "metadata": {}
        },
        "create_time": 1753179983.23185,
        "update_time": null,
        "content": {
          "content_type": "tether_browsing_display",
          "result": "",
          "summary": "",
          "assets": null,
          "tether_id": null
        },
        "status": "finished_successfully",
        "end_turn": null,
        "weight": 0.0,
        "metadata": {
          "command": "spinner",
          "status": "running",
          "request_id": "96323d027ad212ee-ATL",
          "message_type": "next",
          "model_slug": "gpt-4o",
          "default_model_slug": "gpt-4o",
          "parent_id": "bbb21ea7-5244-4cbc-afac-64b065ea9c64",
          "timestamp_": "absolute"
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "bbb21ea7-5244-4cbc-afac-64b065ea9c64",
      "children": [
        "e02c455f-7d2b-49bc-90d5-61eec36eeff9"
      ]
    },
    "e02c455f-7d2b-49bc-90d5-61eec36eeff9": {
      "id": "e02c455f-7d2b-49bc-90d5-61eec36eeff9",
      "message": {
        "id": "e02c455f-7d2b-49bc-90d5-61eec36eeff9",
        "author": {
          "role": "tool",
          "name": "file_search",
          "metadata": {}
        },
        "create_time": 1753179983.231958,
        "update_time": null,
        "content": {
          "content_type": "tether_quote",
          "url": "file-DTG9WjmnoMGYDKT8uVCfiv",
          "domain": "wormhole.txt",
          "text": "# llms-full.txt\r\n# Generated automatically. Do not edit directly.\r\n\r\nDocumentation: https://wormhole.com/docs/\r\n\r\n# List of doc pages:\r\nDoc-Page: https://wormhole.com/docs/build/core-messaging/core-contracts/\r\nDoc-Page: https://wormhole.com/docs/build/core-messaging/\r\nDoc-Page: https://wormhole.com/docs/build/core-messaging/wormhole-relayers/\r\nDoc-Page: https://wormhole.com/docs/build/\r\nDoc-Page: https://wormhole.com/docs/build/multigov/deploy-to-evm/\r\nDoc-Page: https://wormhole.com/docs/build/multigov/deploy-to-solana/\r\nDoc-Page: https://wormhole.com/docs/build/multigov/faq/\r\nDoc-Page: https://wormhole.com/docs/build/multigov/\r\nDoc-Page: https://wormhole.com/docs/build/multigov/upgrade-evm/\r\nDoc-Page: https://wormhole.com/docs/build/multigov/upgrade-solana/\r\nDoc-Page: https://wormhole.com/docs/build/queries/faqs/\r\nDoc-Page: https://wormhole.com/docs/build/queries/\r\nDoc-Page: https://wormhole.com/docs/build/queries/overview/\r\nDoc-Page: https://wormhole.com/docs/build/queries/use-queries/\r\nDoc-Page: https://wormhole.com/docs/build/reference/chain-ids/\r\nDoc-Page: https://wormhole.com/docs/build/reference/consistency-levels/\r\nDoc-Page: https://wormhole.com/docs/build/reference/contract-addresses/\r\nDoc-Page: https://wormhole.com/docs/build/reference/\r\nDoc-Page: https://wormhole.com/docs/build/reference/wormhole-formatted-addresses/\r\nDoc-Page: https://wormhole.com/docs/build/start-building/\r\nDoc-Page: https://wormhole.com/docs/build/start-building/products/\r\nDoc-Page: https://wormhole.com/docs/build/start-building/supported-networks/\r\nDoc-Page: https://wormhole.com/docs/build/start-building/testnet-faucets/\r\nDoc-Page: https://wormhole.com/docs/build/start-building/use-cases/\r\nDoc-Page: https://wormhole.com/docs/build/toolkit/cli/\r\nDoc-Page: https://wormhole.com/docs/build/toolkit/dev-env/\r\nDoc-Page: https://wormhole.com/docs/build/toolkit/faqs/\r\nDoc-Page: https://wormhole.com/docs/build/toolkit/\r\nDoc-Page: https://wormhole.com/docs/build/toolkit/solidity-sdk/\r\nDoc-Page: https://wormhole.com/docs/build/toolkit/typescript-sdk/\r\nDoc-Page: https://wormhole.com/docs/build/toolkit/typescript-sdk/protocols-payloads/\r\nDoc-Page: https://wormhole.com/docs/build/toolkit/typescript-sdk/sdk-layout/\r\nDoc-Page: https://wormhole.com/docs/build/toolkit/typescript-sdk/vaas-protocols/\r\nDoc-Page: https://wormhole.com/docs/build/toolkit/typescript-sdk/wormhole-sdk/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/cctp/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/connect/configuration-v0/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/connect/configuration/configure-data/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/connect/configuration/configure-theme/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/connect/configuration/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/connect/faqs/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/connect/features/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/connect/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/connect/overview/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/connect/routes/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/connect/upgrade/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/cli-commands/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/configuration/access-control/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/configuration/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/configuration/rate-limiting/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/deploy-to-evm/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/deploy-to-solana/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/evm-launchpad/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/installation/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/post-deployment/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/troubleshooting/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/faqs/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/native-token-transfers/managers-transceivers/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/settlement/faqs/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/settlement/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/settlement/liquidity-layer/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/settlement/solver/\r\nDoc-Page: https://wormhole.com/docs/build/transfers/token-bridge/\r\nDoc-Page: https://wormhole.com/docs/infrastructure/\r\nDoc-Page: https://wormhole.com/docs/infrastructure/relayers/\r\nDoc-Page: https://wormhole.com/docs/infrastructure/relayers/run-relayer/\r\nDoc-Page: https://wormhole.com/docs/infrastructure/spy/\r\nDoc-Page: https://wormhole.com/docs/infrastructure/spy/run-spy/\r\nDoc-Page: https://wormhole.com/docs/learn/glossary/\r\nDoc-Page: https://wormhole.com/docs/learn/governance/architecture/\r\nDoc-Page: https://wormhole.com/docs/learn/governance/faq/\r\nDoc-Page: https://wormhole.com/docs/learn/governance/\r\nDoc-Page: https://wormhole.com/docs/learn/governance/overview/\r\nDoc-Page: https://wormhole.com/docs/learn/\r\nDoc-Page: https://wormhole.com/docs/learn/infrastructure/architecture/\r\nDoc-Page: https://wormhole.com/docs/learn/infrastructure/core-contracts/\r\nDoc-Page: https://wormhole.com/docs/learn/infrastructure/guardians/\r\nDoc-Page: https://wormhole.com/docs/learn/infrastructure/\r\nDoc-Page: https://wormhole.com/docs/learn/infrastructure/relayer/\r\nDoc-Page: https://wormhole.com/docs/learn/infrastructure/spy/\r\nDoc-Page: https://wormhole.com/docs/learn/infrastructure/vaas/\r\nDoc-Page: https://wormhole.com/docs/learn/introduction/\r\nDoc-Page: https://wormhole.com/docs/learn/security/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/cctp/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/native-token-transfers/architecture/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/native-token-transfers/deployment/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/native-token-transfers/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/native-token-transfers/overview/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/native-token-transfers/security/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/settlement/architecture/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/settlement/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/settlement/overview/\r\nDoc-Page: https://wormhole.com/docs/learn/transfers/token-bridge/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/connect/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/connect/react-dapp/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/contract-integrations/cross-chain-contracts/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/contract-integrations/cross-chain-token-contracts/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/contract-integrations/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/multichain-assets/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/multichain-assets/multichain-token/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/multigov/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/multigov/treasury-proposal/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/settlements/.index/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/settlements/.settlement-routes/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/wormhole-sdk/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/wormhole-sdk/tokens-via-token-bridge/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/wormhole-sdk/usdc-via-cctp/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/wormholescan/\r\nDoc-Page: https://wormhole.com/docs/tutorials/by-product/wormholescan/replace-signatures/\r\nDoc-Page: https://wormhole.com/docs/tutorials/\r\n\r\n# Full content for each doc page\r\n\r\nDoc-Content: https://wormhole.com/docs/build/core-messaging/core-contracts/\r\n--- BEGIN CONTENT ---\r\n---\r\ntitle: Get Started with Core Contracts\r\ndescription: This guide walks through the key methods of the Core Contracts, providing you with the knowledge needed to integrate them into your cross-chain contracts\r\n---\r\n\r\n# Get Started with Core Contracts\r\n\r\n## Introduction\r\n\r\nWormhole&#x27;s Core Contracts, deployed on each supported blockchain network, enable the fundamental operations of sending and receiving cross-chain messages.\r\n\r\nWhile the implementation details of the Core Contracts varies by network, the core functionality remains consistent across chains. Each version of the Core Contract facilitates secure and reliable cross-chain communication, ensuring that developers can effectively publish and verify messages.\r\n\r\nThis guide will walk you through the variations and key methods of the Core Contracts, providing you with the knowledge needed to integrate them into your cross-chain contracts. To learn more about Core Contracts&#x27; features and how it works, please refer to the [Core Contracts](/docs/learn/infrastructure/core-contracts/){target=\\_blank} page in the Learn section.\r\n\r\n## Prerequisites\r\n\r\nTo interact with the Wormhole Core Contract, you&#x27;ll need the following:\r\n\r\n- The [address of the Core Contract](/docs/build/reference/contract-addresses/#core-contracts){target=\\_blank} on the chains you&#x27;re deploying your contract on\r\n- The [Wormhole chain ID](/docs/build/reference/chain-ids/){target=\\_blank} of the chains you&#x27;re deploying your contract on\r\n- The [Wormhole Finality](/docs/build/reference/consistency-levels/){target=\\_blank} (consistency) levels (required finality) for the chains you&#x27;re deploying your contract on\r\n\r\n## How to Interact with Core Contracts\r\n\r\nBefore writing your own contracts, it&#x27;s essential to understand the key functions and events of the Wormhole Core Contracts. The primary functionality revolves around:\r\n\r\n- **Sending messages** - submitting messages to the Wormhole network for cross-chain communication\r\n- **Receiving and verifying messages** - validating messages received from other chains via the Wormhole network\r\n\r\nWhile the implementation details of the Core Contracts vary by network, the core functionality remains consistent across chains.\r\n\r\n### Sending Messages\r\n\r\nTo send a message, regardless of the environment or chain, the Core Contract is invoked with a message argument from an [emitter](/docs/learn/glossary/#emitter){target=\\_blank}. This emitter might be your contract or an existing application such as the [Token Bridge](/docs/learn/transfers/token-bridge/#token-bridge){target=\\_blank}.\r\n\r\n=== &quot;EVM&quot;\r\n\r\n    The `IWormhole.sol` interface provides the `publishMessage` function, which can be used to publish a message directly to the Core Contract:\r\n\r\n    ```solidity\r\n    function publishMessage(\r\n    uint32 nonce,\r\n    bytes memory payload,\r\n    uint8 consistencyLevel\r\n) external payable returns (uint64 sequence);\r\n    ```\r\n\r\n    ??? interface &quot;Parameters&quot;\r\n\r\n        `nonce` ++&quot;uint32&quot;++\r\n        \r\n        A free integer field that can be used however you like. Note that changing the `nonce` will result in a different digest.\r\n\r\n        ---\r\n\r\n        `payload` ++&quot;bytes memory&quot;++\r\n        \r\n        The content of the emitted message. Due to the constraints of individual blockchains, it may be capped to a certain maximum length.\r\n\r\n        ---\r\n\r\n        `consistencyLevel` ++&quot;uint8&quot;++\r\n        \r\n        A value that defines the required level of finality that must be reached before the Guardians will observe and attest to emitted events.\r\n\r\n    ??? interface &quot;Returns&quot;\r\n\r\n        `sequence` ++&quot;uint64&quot;++\r\n        \r\n        A unique number that increments for every message for a given emitter (and implicitly chain). This, combined with the emitter address and emitter chain ID, allows the VAA for this message to be queried from the [Wormholescan API](https://docs.wormholescan.io/){target=\\_blank}.\r\n    \r\n    ??? interface &quot;Example&quot;\r\n\r\n        ```solidity\r\n        IWormhole wormhole = IWormhole(wormholeAddr);\r\n\r\n// Get the fee for publishing a message\r\nuint256 wormholeFee = wormhole.messageFee();\r\n\r\n// Check fee and send parameters\r\n\r\n// Create the HelloWorldMessage struct\r\nHelloWorldMessage memory parsedMessage = HelloWorldMessage({\r\n    payloadID: uint8(1),\r\n    message: helloWorldMessage\r\n});\r\n\r\n// Encode the HelloWorldMessage struct into bytes\r\nbytes memory encodedMessage = encodeMessage(parsedMessage);\r\n\r\n// Send the HelloWorld message by calling publishMessage on the\r\n// wormhole core contract and paying the Wormhole protocol fee.\r\nmessageSequence = wormhole.publishMessage{value: wormholeFee}(\r\n    0, // batchID\r\n    encodedMessage,\r\n    wormholeFinality()\r\n);\r\n        ```\r\n\r\n        View the complete Hello World example in the [Wormhole Scaffolding](https://github.com/wormhole-foundation/wormhole-scaffolding/tree/main/evm/src/01_hello_world){target=\\_blank} repository on GitHub.\r\n\r\n=== &quot;Solana&quot;\r\n\r\n    The `wormhole_anchor_sdk::wormhole` module and the Wormhole program account can be used to pass a message directly to the Core Contract via the `wormhole::post_message` function:\r\n\r\n    ```rs\r\n    pub fn post_message&lt;&#x27;info&gt;(\r\n        ctx: CpiContext&lt;&#x27;_, &#x27;_, &#x27;_, &#x27;info, PostMessage&lt;&#x27;info&gt;&gt;,\r\n        batch_id: u32,\r\n        payload: Vec&lt;u8&gt;,\r\n        finality: Finality\r\n    ) -&gt; Result&lt;()&gt;\r\n    ```\r\n\r\n    ??? interface &quot;Parameters&quot;\r\n\r\n        `ctx` ++&quot;CpiContext&lt;&#x27;_, &#x27;_, &#x27;_, &#x27;info, PostMessage&lt;&#x27;info&gt;&gt;&quot;++ \r\n        \r\n        Provides the necessary context for executing the function, including the accounts and program information required for the Cross-Program Invocation (CPI).\r\n\r\n        ??? child &quot;Type `pub struct CpiContext&lt;&#x27;a, &#x27;b, &#x27;c, &#x27;info, T&gt;`&quot;\r\n\r\n            ```rs\r\n            pub struct CpiContext&lt;&#x27;a, &#x27;b, &#x27;c, &#x27;info, T&gt;\r\n            where\r\n                T: ToAccountMetas + ToAccountInfos&lt;&#x27;info&gt;,\r\n            {\r\n                pub accounts: T,\r\n                pub remaining_accounts: Vec&lt;AccountInfo&lt;&#x27;info&gt;&gt;,\r\n                pub program: AccountInfo&lt;&#x27;info&gt;,\r\n                pub signer_seeds: &amp;&#x27;a [&amp;&#x27;b [&amp;&#x27;c [u8]]],\r\n            }\r\n            ```\r\n\r\n            For more information, please refer to the [`wormhole_anchor_sdk` Rust docs](https://docs.rs/anchor-lang/0.29.0/anchor_lang/context/struct.CpiContext.html){target=\\_blank}.\r\n\r\n        ??? child &quot;Type `PostMessage&lt;&#x27;info&gt;`&quot;\r\n\r\n            ```rs\r\n            pub struct PostMessage&lt;&#x27;info&gt; {\r\n                pub config: AccountInfo&lt;&#x27;info&gt;,\r\n                pub message: AccountInfo&lt;&#x27;info&gt;,\r\n                pub emitter: AccountInfo&lt;&#x27;info&gt;,\r\n                pub sequence: AccountInfo&lt;&#x27;info&gt;,\r\n                pub payer: AccountInfo&lt;&#x27;info&gt;,\r\n                pub fee_collector: AccountInfo&lt;&#x27;info&gt;,\r\n                pub clock: AccountInfo&lt;&#x27;info&gt;,\r\n                pub rent: AccountInfo&lt;&#x27;info&gt;,\r\n                pub system_program: AccountInfo&lt;&#x27;info&gt;,\r\n            }\r\n            ```\r\n\r\n            For more information, please refer to the [`wormhole_anchor_sdk` Rust docs](https://docs.rs/wormhole-anchor-sdk/latest/wormhole_anchor_sdk/wormhole/instructions/struct.PostMessage.html){target=\\_blank}.\r\n\r\n        ---\r\n\r\n        `batch_id` ++&quot;u32&quot;++\r\n        \r\n        An identifier for the message batch.\r\n\r\n        ---\r\n\r\n        `payload` ++&quot;Vec&lt;u8&gt;&quot;++\r\n        \r\n        The data being sent in the message. This is a variable-length byte array that contains the actual content or information being transmitted. To learn about the different types of payloads, check out the [VAAs](/docs/learn/infrastructure/vaas#payload-types){target=\\_blank} page.\r\n\r\n        ---\r\n\r\n        `finality` ++&quot;Finality&quot;++\r\n        \r\n        Specifies the level of finality or confirmation required for the message.\r\n        \r\n        ??? child &quot;Type `Finality`&quot;\r\n\r\n            ```rs\r\n            pub enum Finality {\r\n                Confirmed,\r\n                Finalized,\r\n            }\r\n            ```\r\n    \r\n    ??? interface &quot;Returns&quot;\r\n\r\n        ++&quot;Result&lt;()&gt;&quot;++\r\n        \r\n        The result of the function’s execution. If the function completes successfully, it returns `Ok(())`, otherwise it returns `Err(E)`, indicating that an error occurred along with the details about the error\r\n    \r\n    ??? interface &quot;Example&quot;\r\n\r\n        ```rust\r\n        let fee = ctx.accounts.wormhole_bridge.fee();\r\n// ... Check fee and send parameters\r\n\r\nlet config = &amp;ctx.accounts.config;\r\nlet payload: Vec&lt;u8&gt; = HelloWorldMessage::Hello { message }.try_to_vec()?;\r\n\r\n// Invoke `wormhole::post_message`.\r\nwormhole::post_message(\r\n    CpiContext::new_with_signer(\r\n        ctx.accounts.wormhole_program.to_account_info(),\r\n        wormhole::PostMessage {\r\n            // ... Set fields\r\n        },\r\n        &amp;[\r\n            // ... Set seeds\r\n        ],\r\n    ),\r\n    config.batch_id,\r\n    payload,\r\n    config.finality.into(),\r\n)?;\r\n        ```\r\n\r\n        View the complete Hello World example in the [Wormhole Scaffolding](https://github.com/wormhole-foundation/wormhole-scaffolding/tree/main/solana/programs/01_hello_world){target=\\_blank} repository on GitHub.\r\n\r\nOnce the message is emitted from the Core Contract, the [Guardian Network](/docs/learn/infrastructure/guardians/){target=\\_blank} will observe the message and sign the digest of an Attestation [VAA](/docs/learn/infrastructure/vaas/){target=\\_blank}. On EVM chains, the body of the VAA is hashed twice with keccak256 to produce the signed digest message. On Solana, the [Solana secp256k1 program](https://docs.solana.com/developing/runtime-facilities/programs#secp256k1-program){target=\\_blank} will hash the message passed. In this case, the argument for the message should be a single hash of the body, not the twice-hashed body.\r\n\r\nVAAs are [multicast](/docs/learn/infrastructure/core-contracts/#multicast){target=\\_blank} by default. This means there is no default target chain for a given message. The application developer decides on the format of the message and its treatment upon receipt.\r\n\r\n### Receiving Messages\r\n\r\nThe way a message is received and handled depends on the environment.\r\n\r\n=== &quot;EVM&quot;\r\n\r\n    On EVM chains, the message passed is the raw VAA encoded as binary. The `IWormhole.sol` interface provides the `parseAndVerifyVM` function, which can be used to parse and verify the received message.\r\n\r\n    ```solidity\r\n    function parseAndVerifyVM(\r\n    bytes calldata encodedVM\r\n) external view returns (VM memory vm, bool valid, string memory reason);\r\n    ```\r\n\r\n    ??? interface &quot;Parameters&quot;\r\n\r\n        `encodedVM` ++&quot;bytes calldata&quot;++\r\n        \r\n        The encoded message as a Verified Action Approval (VAA), which contains all necessary information for verification and processing.\r\n\r\n    ??? interface &quot;Returns&quot;\r\n\r\n        `vm` ++&quot;VM memory&quot;++\r\n        \r\n        The valid parsed VAA, which will include the original `emitterAddress`, `sequenceNumber`, and `consistencyLevel`, among other fields outlined on the [VAAs](/docs/learn/infrastructure/vaas/) page.\r\n\r\n        ??? child &quot;Struct `VM`&quot;\r\n\r\n            ```solidity\r\n            struct VM {\r\n                uint8 version;\r\n                uint32 timestamp;\r\n                uint32 nonce;\r\n                uint16 emitterChainId;\r\n                bytes32 emitterAddress;\r\n                uint64 sequence;\r\n                uint8 consistencyLevel;\r\n                bytes payload;\r\n                uint32 guardianSetIndex;\r\n                Signature[] signatures;\r\n                bytes32 hash;\r\n            }\r\n            ```\r\n\r\n            For more information, refer to the [`IWormhole.sol` interface](https://github.com/wormhole-foundation/wormhole/blob/main/ethereum/contracts/interfaces/IWormhole.sol){target=\\_blank}.\r\n\r\n        ---\r\n        \r\n        `valid` ++&quot;bool&quot;++\r\n        \r\n        A boolean indicating whether the VAA is valid or not.\r\n        \r\n        ---\r\n\r\n        `reason` ++&quot;string&quot;++\r\n        \r\n        If the VAA is not valid, a reason will be provided\r\n\r\n    ??? interface &quot;Example&quot;\r\n\r\n        ```solidity\r\n        function receiveMessage(bytes memory encodedMessage) public {\r\n    // Call the Wormhole core contract to parse and verify the encodedMessage\r\n    (\r\n        IWormhole.VM memory wormholeMessage,\r\n        bool valid,\r\n        string memory reason\r\n    ) = wormhole().parseAndVerifyVM(encodedMessage);\r\n\r\n    // Perform safety checks here\r\n\r\n    // Decode the message payload into the HelloWorldMessage struct\r\n    HelloWorldMessage memory parsedMessage = decodeMessage(\r\n        wormholeMessage.payload\r\n    );\r\n\r\n    // Your custom application logic here\r\n}\r\n        ```\r\n\r\n        View the complete Hello World example in the [Wormhole Scaffolding](https://github.com/wormhole-foundation/wormhole-scaffolding/tree/main/evm/src/01_hello_world){target=\\_blank} repository on GitHub.\r\n\r\n=== &quot;Solana&quot;\r\n\r\n    On Solana, the VAA is first posted and verified by the Core Contract, after which it can be read by the receiving contract and action taken.\r\n\r\n    Retrieve the raw message data:\r\n\r\n    ```rs\r\n    let posted_message = &amp;ctx.accounts.posted;\r\n    posted_message.data()\r\n    ```\r\n\r\n    ??? interface &quot;Example&quot;\r\n\r\n        ```rust\r\n        pub fn receive_message(ctx: Context&lt;ReceiveMessage&gt;, vaa_hash: [u8; 32]) -&gt; Result&lt;()&gt; {\r\n    let posted_message = &amp;ctx.accounts.posted;\r\n\r\n    if let HelloWorldMessage::Hello { message } = posted_message.data() {\r\n        // Check message\r\n        // Your custom application logic here\r\n        Ok(())\r\n    } else {\r\n        Err(HelloWorldError::InvalidMessage.into())\r\n    }\r\n}\r\n        ```\r\n\r\n        View the complete Hello World example in the [Wormhole Scaffolding](https://github.com/wormhole-foundation/wormhole-scaffolding/tree/main/solana/programs/01_hello_world){target=\\_blank} repository on GitHub.\r\n\r\n#### Validating the Emitter\r\n\r\nWhen processing cross-chain messages, it&#x27;s critical to ensure that the message originates from a trusted sender (emitter). This can be done by verifying the emitter address and chain ID in the parsed VAA.\r\n\r\nTypically, contracts should provide a method to register trusted emitters and check incoming messages against this list before processing them. For example, the following check ensures that the emitter is registered and authorized:\r\n\r\n```solidity\r\nrequire(isRegisteredSender(emitterChainId, emitterAddress), &quot;Invalid emitter&quot;);\r\n```\r\n\r\nThis check can be applied after the VAA is parsed, ensuring only authorized senders can interact with the receiving contract. Trusted emitters can be registered using a method like `setRegisteredSender` during contract deployment or initialization.\r\n\r\n```typescript\r\nconst tx = await receiverContract.setRegisteredSender(\r\n  sourceChain.chainId,\r\n  ethers.zeroPadValue(senderAddress as BytesLike, 32)\r\n);\r\n\r\nawait tx.wait();\r\n```\r\n\r\n#### Additional Checks\r\n\r\nIn addition to environment-specific checks that should be performed, a contract should take care to check other [fields in the body](/docs/learn/infrastructure/vaas/){target=\\_blank}, including:\r\n\r\n- **Sequence** - is this the expected sequence number? How should out-of-order deliveries be handled?\r\n- **Consistency level** - for the chain this message came from, is the [Wormhole Finality](/docs/build/reference/consistency-levels/){target=\\_blank} level enough to guarantee the transaction won&#x27;t be reverted after taking some action?\r\n\r\nThe VAA digest is separate from the VAA body but is also relevant. It can be used for replay protection by checking if the digest has already been seen. Since the payload itself is application-specific, there may be other elements to check to ensure safety.\r\n\r\n## Source Code References\r\n\r\nFor a deeper understanding of the Core Contract implementation for a specific blockchain environment and to review the actual source code, please refer to the following links:\r\n\r\n- [Algorand Core Contract source code](https://github.com/wormhole-foundation/wormhole/blob/main/algorand/wormhole_core.py){target=\\_blank}\r\n- [Aptos Core Contract source code](https://github.com/wormhole-foundation/wormhole/tree/main/aptos/wormhole){target=\\_blank}\r\n- [EVM Core Contract source code](https://github.com/wormhole-foundation/wormhole/tree/main/ethereum/contracts){target=\\_blank} ([`IWormhole.sol` interface](https://github.com/wormhole-foundation/wormhole/blob/main/ethereum/contracts/interfaces/IWormhole.sol){target=\\_blank})\r\n- [NEAR Core Contract source code](https://github.com/wormhole-foundation/wormhole/tree/main/near/contracts/wormhole){target=\\_blank}\r\n- [Solana Core Contract source code](https://github.com/wormhole-foundation/wormhole/tree/main/solana/bridge/program){target=\\_blank}\r\n- [Sui Core Contract source code](https://github.com/wormhole-foundation/wormhole/tree/main/sui/wormhole){target=\\_blank}\r\n- [Terra Core Contract source code](https://github.com/wormhole-foundation/wormhole/tree/main/terra/contracts/wormhole){target=\\_blank}\r\n--- END CONTENT ---\r\n\r\nDoc-Content: https://wormhole.com/docs/build/core-messaging/\r\n--- BEGIN CONTENT ---\r\n---\r\ntitle: Core Messaging Layer Contracts\r\ndescription: Learn to use Wormhole’s foundational messaging contracts to build multichain apps with direct control over publishing, verifying, relaying, and more.\r\n---\r\n\r\n# Core Messaging\r\n\r\nWormhole-deployed relayers and Core Contracts are essential for sending and receiving multichain messages. Learning to work directly with these building blocks offers a deeper understanding of Wormhole and increased control and customization options. \r\n\r\nFollow the links below for how-to guides about using Core Contracts and Wormhole-deployed relayers to send, receive, validate, and track multichain messages. \r\n\r\n## Simplified Message Flow\r\n\r\n\r\nWormhole-deployed relayer support is limited to EVM environments. For a complete list of supported EVM environment blockchains, see the [Supported Networks](/docs/build/start-building/supported-networks/){target=\\_blank} page.\r\n\r\n[timeline(wormhole-docs/.snippets/text/build/core-messaging/core-messaging-timeline.json)]\r\n\r\n## Next Steps\r\n\r\n&lt;div class=&quot;grid cards&quot; markdown &gt;\r\n\r\n-   :octicons-tools-16:{ .lg .middle} **Get Started with Core Contracts**\r\n\r\n    ---\r\n\r\n    Follow this series of how-to guides about interacting with Core Contracts to send, receive, and validate messages.\r\n\r\n    [:custom-arrow: Get started](/docs/build/core-messaging/core-contracts/#prerequisites)\r\n\r\n-   :octicons-tools-16:{ .lg .middle } **Get Started with Relayers**\r\n\r\n    ---\r\n\r\n    Follow this series of how-to guides about using Wormhole-deployed relayers to send, receive, and track the progress of messages.\r\n\r\n    [:custom-arrow: Get started](/docs/build/core-messaging/wormhole-relayers/#get-started-with-the-wormhole-relayer)\r\n\r\n&lt;/div&gt;\r\n--- END CONTENT ---\r\n\r\nDoc-Content: https://wormhole.com/docs/build/core-messaging/wormhole-relayers/\r\n--- BEGIN CONTENT ---\r\n---\r\ntitle: Wormhole-Deployed Relayers\r\ndescription: Learn about the Wormhole-deployed relayer configuration for seamless cross-chain messaging between contracts on different EVM blockchains without off-chain deployments.\r\n---\r\n\r\n# Wormhole Relayer\r\n\r\n## Introduction\r\n\r\nThe Wormhole-deployed relayers provide a mechanism for contracts on one blockchain to send messages to contracts on another without requiring off-chain infrastructure. Through the Wormhole relayer module, developers can use an untrusted delivery provider to transport VAAs, saving the need to build and maintain custom relaying solutions. The option to [run a custom relayer](/docs/infrastructure/relayers/run-relayer/) is available for more complex needs.\r\n\r\nThis section covers the components and interfaces involved in using the Wormhole relayer module, such as message sending and receiving, delivery guarantees, and considerations for building reliable and efficient cross-chain applications. Additionally, you&#x27;ll find details on how to handle specific implementation scenarios and track message delivery progress using the Wormhole CLI tool.\r\n\r\n## Get Started with the Wormhole Relayer\r\n\r\nBefore getting started, it&#x27;s important to note that the Wormhole-deployed relayer configuration is currently **limited to EVM environments**. The complete list of EVM environment blockchains is on the [Supported Networks](/docs/build/start-building/supported-networks/) page.\r\n\r\nTo interact with the Wormhole relayer, you&#x27;ll need to create contracts on the source and target chains to handle the sending and receiving of messages. No off-chain logic needs to be implemented to take advantage of Wormhole-powered relaying.\r\n\r\n&lt;figure markdown=&quot;span&quot;&gt;\r\n  ![Wormhole Relayer](/docs/images/build/core-messaging/wormhole-relayers/relayer-1.webp)\r\n  &lt;figcaption&gt;The components outlined in blue must be implemented.&lt;/figcaption&gt;\r\n&lt;/figure&gt;\r\n\r\n### Wormhole Relayer Interfaces\r\n\r\nThere are three relevant interfaces to discuss when utilizing the Wormhole relayer module:\r\n\r\n- [**`IWormholeRelayer`**](https://github.com/wormhole-foundation/wormhole/blob/main/relayer/ethereum/contracts/interfaces/relayer/IWormholeRelayer.sol){target=\\_blank} - the primary interface by which you send and receive messages. It allows you to request the sending of messages and VAAs\r\n- [**`IWormholeReceiver`**](https://github.com/wormhole-foundation/wormhole/blob/main/relayer/ethereum/contracts/interfaces/relayer/IWormholeReceiver.sol){target=\\_blank} - this is the interface you are responsible for implementing. It allows the selected delivery provider to deliver messages/VAAs to your contract\r\n- [**`IDeliveryProvider`**](https://github.com/wormhole-foundation/wormhole/blob/main/relayer/ethereum/contracts/interfaces/relayer/IDeliveryProvider.sol){target=\\_blank} - this interface represents the delivery pricing information for a given relayer network. Each delivery provider implements this on every blockchain they support delivering from\r\n\r\n## Interact with the Wormhole Relayer\r\n\r\nTo start interacting with the Wormhole relayer in your contracts, you&#x27;ll need to import the `IWormholeRelayer` interface and set up a reference using the contract address to the Wormhole-deployed relayer on the supported network of your choice.\r\n\r\nTo easily integrate with the Wormhole relayer interface, you can use the [Wormhole Solidity SDK](https://github.com/wormhole-foundation/wormhole-solidity-sdk){target=\\_blank}.\r\n\r\nTo retrieve the contract address of the Wormhole relayer, refer to the Wormhole relayer section on the [Contract Addresses](/docs/build/reference/contract-addresses/#wormhole-relayer) reference page.\r\n\r\nYour initial set up should resemble the following:\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.26;\r\n\r\nimport &quot;wormhole-solidity-sdk/interfaces/IWormholeRelayer.sol&quot;;\r\n\r\ncontract Example {\r\n    IWormholeRelayer public wormholeRelayer;\r\n\r\n    constructor(address _wormholeRelayer) {\r\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\r\n    }\r\n}\r\n```\r\n\r\nThe code provided sets up the basic structure for your contract to interact with the Wormhole relayer using the address supplied to the constructor. By leveraging methods from the `IWormholeRelayer` interface, you can implement message sending and receiving functionalities. The following sections will detail the specific methods you need to use for these tasks.\r\n\r\n### Send a Message\r\n\r\nTo send a message to a contract on another EVM chain, you can call the `sendPayloadToEvm` method provided by the `IWormholeRelayer` interface.\r\n\r\n```solidity\r\nfunction sendPayloadToEvm(\r\n    // Chain ID in Wormhole format\r\n    uint16 targetChain,     \r\n    // Contract Address on target chain we&#x27;re sending a message to\r\n    address targetAddress,  \r\n    // The payload, encoded as bytes\r\n    bytes memory payload,   \r\n    // How much value to attach to the delivery transaction \r\n    uint256 receiverValue,  \r\n    // The gas limit to set on the delivery transaction\r\n    uint256 gasLimit        \r\n) external payable returns (\r\n    // Unique, incrementing ID, used to identify a message\r\n    uint64 sequence\r\n);\r\n```\r\n\r\n!!! tip\r\n    To reduce transaction confirmation time, you can lower the consistency level using the [`sendToEvm`](https://github.com/wormhole-foundation/wormhole/blob/v{{repositories.wormhole.version}}/sdk/js/src/relayer/relayer/send.ts#L33){target=\\_blank} method.\r\n\r\nThe `sendPayloadToEvm` method is marked `payable` to receive fee payment for the transaction. The value to attach to the invocation is determined by calling the `quoteEVMDeliveryPrice`, which provides an estimate of the cost of gas on the target chain.\r\n\r\n```solidity\r\nfunction quoteEVMDeliveryPrice(\r\n    // Chain ID in Wormhole format\r\n    uint16 targetChain,\r\n    // How much value to attach to delivery transaction \r\n    uint256 receiverValue,\r\n    // The gas limit to attach to the delivery transaction\r\n    uint256 gasLimit\r\n) external view returns (\r\n    // How much value to attach to the send call\r\n    uint256 nativePriceQuote, \r\n    uint256 targetChainRefundPerGasUnused\r\n);\r\n```\r\n\r\nThis method should be called before sending a message, and the value returned for `nativePriceQuote` should be attached to the call to send the payload to cover the transaction&#x27;s cost on the target chain.\r\n\r\nIn total, sending a message across EVM chains can be as simple as getting a fee quote and sending the message as follows:\r\n\r\n```solidity\r\n// Get a quote for the cost of gas for delivery\r\n(cost, ) = wormholeRelayer.quoteEVMDeliveryPrice(\r\n    targetChain,\r\n    valueToSend,\r\n    GAS_LIMIT\r\n);\r\n\r\n// Send the message\r\nwormholeRelayer.sendPayloadToEvm{value: cost}(\r\n    targetChain,\r\n    targetAddress,\r\n    abi.encode(payload),\r\n    valueToSend, \r\n    GAS_LIMIT\r\n);\r\n```\r\n\r\n### Receive a Message\r\n\r\nTo receive a message using a Wormhole relayer, the target contract must implement the [`IWormholeReceiver`](https://github.com/wormhole-foundation/wormhole-relayer-solidity-sdk/blob/main/src/interfaces/IWormholeReceiver.sol){target=\\_blank} interface, as shown in the [previous section](#interact-with-the-wormhole-relayer).\r\n\r\n```solidity\r\nfunction receiveWormholeMessages(\r\n    bytes memory payload,           // Message passed by source contract \r\n    bytes[] memory additionalVaas,  // Any additional VAAs that are needed (Note: these are unverified) \r\n    bytes32 sourceAddress,          // The address of the source contract\r\n    uint16 sourceChain,             // The Wormhole chain ID\r\n    bytes32 deliveryHash            // A hash of contents, useful for replay protection\r\n) external payable;\r\n```\r\n\r\nThe logic inside the function body may be whatever business logic is required to take action on the specific payload.\r\n\r\n## Delivery Guarantees\r\n\r\nThe Wormhole relayer protocol is intended to create a service interface whereby mutually distrustful integrators and delivery providers can work together to provide a seamless dApp experience. You don&#x27;t trust the delivery providers with your data, and the delivery providers don&#x27;t trust your smart contract. The primary agreement between integrators and delivery providers is that when a delivery is requested, the provider will attempt to deliver the VAA within the provider&#x27;s stated delivery timeframe.\r\n\r\nThis creates a marketplace whereby providers can set different price levels and service guarantees. Delivery providers effectively accept the slippage risk premium of delivering your VAAs in exchange for a set fee rate. Thus, the providers agree to deliver your messages even if they do so at a loss.\r\n\r\nDelivery providers should set their prices such that they turn a profit on average but not necessarily on every single transfer. Thus, some providers may choose to set higher rates for tighter guarantees or lower rates for less stringent guarantees.\r\n\r\n## Delivery Statuses\r\n\r\nAll deliveries result in one of the following four outcomes before the delivery provider&#x27;s delivery timeframe. When they occur, these outcomes are emitted as EVM events from the Wormhole relayer contract. The four possible outcomes are:\r\n\r\n- (0) Delivery Success\r\n- (1) Receiver Failure\r\n- (2) Forward Request Success\r\n- (3) Forward Request Failure\r\n\r\nA receiver failure is a scenario in which the selected provider attempted the delivery but it could not be completely successfully. The three possible causes for a delivery failure are:\r\n\r\n- The target contract does not implement the `IWormholeReceiver` interface\r\n- The target contract threw an exception or reverted during the execution of `receiveWormholeMessages`\r\n- The target contract exceeded the specified `gasLimit` while executing `receiveWormholeMessages`\r\n\r\nAll three of these scenarios can be avoided with correct design by the integrator, and thus, it is up to the integrator to resolve them. Any other scenario that causes a delivery to not be performed should be considered an outage by some component of the system, including potentially the blockchains themselves.\r\n\r\n`Forward Request Success` and `Forward Failure` represent when the delivery succeeded and the user requested a forward during the delivery. If the user has enough funds left over as a refund to complete the forward, the forward will be executed, and the status will be `Forward Request Success`. Otherwise, it will be `Forward Request Failure`.\r\n\r\n## Other Considerations\r\n\r\nSome implementation details should be considered during development to ensure safety and a pleasant UX. Ensure that your engineering efforts have appropriately considered each of the following areas:\r\n\r\n- Receiving a message from a relayer\r\n- Checking for expected emitter\r\n- Calling `parseAndVerify` on any additional VAAs\r\n- Replay protection\r\n- Message ordering (no guarantees on order of messages delivered)\r\n- Forwarding and call chaining\r\n- Refunding overpayment of `gasLimit`\r\n- Refunding overpayment of value sent\r\n\r\n## Track the Progress of Messages with the Wormhole CLI\r\n\r\nWhile no off-chain programs are required, a developer may want to track the progress of messages in flight. To track the progress of messages in flight, use the [Wormhole CLI](/docs/build/toolkit/cli/) tool&#x27;s `status` subcommand. As an example, you can use the following commands to track the status of a transfer by providing the environment, origin network, and transaction hash to the `worm status` command:\r\n\r\n=== &quot;Mainnet&quot;\r\n\r\n    ```bash\r\n    worm status mainnet ethereum INSERT_TRANSACTION_HASH\r\n    ```\r\n\r\n=== &quot;Testnet&quot;\r\n\r\n    ```bash\r\n    worm status testnet ethereum INSERT_TRANSACTION_HASH\r\n    ```\r\n\r\nSee the [Wormhole CLI tool docs](/docs/build/toolkit/cli/) for installation and usage.\r\n\r\n## Step-by-Step Tutorial\r\n\r\nFor detailed, step-by-step guidance on creating cross-chain contracts that interact with the Wormhole relayer, refer to the [Create Cross-Chain Contracts](/docs/tutorials/by-product/contract-integrations/cross-chain-contracts/) tutorial.\r\n--- END CONTENT ---\r\n\r\nDoc-Content: https://wormhole.com/docs/build/\r\n--- BEGIN CONTENT ---\r\n---\r\ntitle: Build with Wormhole\r\ndescription: Learn how to start building multichain solutions on Wormhole, with tips to get started, an overview of the toolkit, and an introduction to the protocols.\r\ntemplate: root-index-page.html \r\n---\r\n\r\n# Build\r\n\r\n## Quick Start: Step-by-Step Tutorials\r\n\r\nIf you learn best by building, start here to build with the Wormhole TypeScript SDK:\r\n\r\n- [**Transfer Tokens via the Token Bridge**](/docs/tutorials/by-product/wormhole-sdk/tokens-via-token-bridge/){target=\\_blank} - use the [Wormhole SDK&#x27;s](/docs/build/toolkit/typescript-sdk/){target=\\_blank} Token Bridge method to move wrapped assets across networks\r\n\r\n- [**Transfer USDC via CCTP and Wormhole SDK**](/docs/tutorials/by-product/wormhole-sdk/usdc-via-cctp/){target=\\_blank} - combine the [Wormhole SDK](/docs/build/toolkit/typescript-sdk/){target=\\_blank} and Circle&#x27;s Cross-Chain Transfer Protocol (CCTP) to bridge native USDC across networks\r\n\r\nAlternatively, start here to work with Wormhole contracts directly:\r\n\r\n- [**Create Multichain Messaging Contracts**](/docs/tutorials/by-product/contract-integrations/cross-chain-contracts/) - create mulitchain contracts using Wormhole&#x27;s Solidity SDK. You will deploy smart contracts and send messages across chains\r\n\r\n- [**Create Multichain Token Transfer Contracts**](/docs/tutorials/by-product/contract-integrations/cross-chain-token-contracts/) - create multichain token transfers using Wormhole&#x27;s Solidity SDK. You will build and deploy smart contracts to send tokens from one blockchain to another\r\n\r\n## Builder Essentials\r\n\r\nAccess essential information and tools quickly:\r\n\r\n&lt;div class=&quot;grid cards&quot; markdown&gt;\r\n\r\n-   :octicons-tools-16:{ .lg .middle } **Supported Networks**\r\n\r\n    ---\r\n\r\n    Supported blockchains by environment - main or testnet availability and quick links to the website, documentation, and block explorer for each network.\r\n\r\n    [:custom-arrow: Supported Networks](/docs/build/start-building/supported-networks/)\r\n\r\n-   :octicons-tools-16:{ .lg .middle } **Testnet Faucets**\r\n\r\n    ---\r\n\r\n    Links to testnet token faucets for supported networks.\r\n\r\n    [:custom-arrow: Get Testnet Tokens](/docs/build/start-building/testnet-faucets/)\r\n\r\n-   :octicons-tools-16:{ .lg .middle } **Wormhole TypeScript SDK**\r\n\r\n    ---\r\n\r\n    Your guide to Wormhole SDK installation and usage, concepts overview, and code samples.\r\n\r\n    [:custom-arrow: Wormhole TypeScript SDK](/docs/build/toolkit/typescript-sdk/wormhole-sdk/)\r\n\r\n-   :octicons-tools-16:{ .lg .middle } **Reference**\r\n\r\n    ---\r\n\r\n    Wormhole chain ID, contract address, address formatting and conversion, and consistency information.\r\n\r\n    [:custom-arrow: Reference](/docs/build/reference/)\r\n\r\n&lt;/div&gt;\r\n\r\n## Integrate Transfer Products \r\n\r\n&lt;div class=&quot;grid cards&quot; markdown&gt;\r\n\r\n-   :octicons-tools-16:{ .lg .middle } **Multichain Transfers**\r\n\r\n    ---\r\n\r\n    - **Connect UI widget** - easy-to-use UI for multichain asset transfers via Wormhole in a web application\r\n    - **Native Token Transfers (NTT)** - native asset transfer, without the need for wrapped assets\r\n    - **Token Bridge** - transfer wrapped assets with optional message payloads\r\n    - **Settlement** - intent-based solution enabling fast and efficient asset transfers across Ethereum, Solana, Sui, and more\r\n\r\n    [:custom-arrow: Build Multichain Transfers](/docs/build/transfers/)\r\n\r\n&lt;/div&gt;\r\n\r\n## Access Real-Time Data\r\n\r\n&lt;div class=&quot;grid cards&quot; markdown&gt;\r\n\r\n-   :octicons-tools-16:{ .lg .middle } **Real-Time Data**\r\n\r\n    ---\r\n\r\n    - **Wormhole Queries** - on-demand access to Guardian-attested on-chain data via a simple REST endpoint to initiate an off-chain request via a proxy\r\n    - **Supported query types** - includes query equivalents for `eth_call` (with options for timestamp and finality), `sol_account`, and `sol_pda`\r\n    - **Use familiar endpoints** - make calls against the RPC provider endpoints you already know and use\r\n\r\n    [:custom-arrow: Build with Queries](/docs/build/queries/)\r\n\r\n&lt;/div&gt;\r\n\r\n## Multichain Governance\r\n\r\n&lt;div class=&quot;grid cards&quot; markdown&gt;\r\n\r\n-   :octicons-tools-16:{ .lg .middle } **MultiGov**\r\n\r\n    ---\r\n\r\n    - **Wormhole&#x27;s MultiGov** - a multichain governance system using Wormhole for seamless voting and proposal execution across multiple blockchain networks\r\n    - **Hub-and-spoke model** - spoke chain contracts handle local voting and proposals with results sent to the hub for vote aggregation and tallying, proposal management, and coordinating governance across connected chains\r\n    - **Wormhole security** - moving vote weight checkpoints, timelocks, and Wormhole verification keep governance activity secure\r\n\r\n    [:custom-arrow: Build with MultiGov](/docs/build/multigov/)\r\n\r\n&lt;/div&gt;\r\n--- END CONTENT ---\r\n\r\nDoc-Content: https://wormhole.com/docs/build/multigov/deploy-to-evm/\r\n--- BEGIN CONTENT ---\r\n---\r\ntitle: Deploy MultiGov on EVM Chains\r\ndescription: Set up and deploy MultiGov to EVM locally with step-by-step instructions for configuring, compiling, and deploying smart contracts across chains.\r\n---\r\n\r\n# Deploy MultiGov on EVM Chains\r\n\r\nThis guide provodes instructions to set up and deploy the MultiGov governance system locally. Before diving into the technical deployment, ensure that MultiGov is the right fit for your project’s governance needs by following the steps for the [integration process](/docs/build/multigov/){target=\\_blank}.\r\n\r\nOnce your project is approved through the intake process and you’ve collaborated with the Tally team to tailor MultiGov to your requirements, use this guide to configure, compile, and deploy the necessary smart contracts across your desired blockchain networks. This deployment will enable decentralized governance across your hub and spoke chains.\r\n\r\n## Prerequisites \r\n\r\nTo interact with MultiGov, you&#x27;ll need the following:\r\n\r\n- Install [Foundry](https://book.getfoundry.sh/getting-started/installation){target=\\_blank}\r\n- Install [Git](https://git-scm.com/downloads){target=\\_blank}\r\n- Clone the repository:\r\n   ```bash\r\n   git clone https://github.com/wormhole-foundation/multigov\r\n   cd evm # for evm testing/deploying\r\n   ```\r\n\r\n## Development Setup\r\n\r\nFor developers looking to set up a local MultiGov environment:\r\n\r\n1. Install dependencies:\r\n   ```bash\r\n   forge install\r\n   ```\r\n\r\n2. Set up environment variables:\r\n   ```bash\r\n   cp .env.example .env\r\n   ```\r\n\r\n   Edit `.env` with your specific [configuration](#configuration){target=\\_blank}\r\n\r\n3. Compile contracts:\r\n   ```bash\r\n   forge build\r\n   ```\r\n\r\n4. Deploy contracts (example for Sepolia testnet): &lt;!-- would be nice to cover the contracts before the deployment step --&gt;\r\n\r\n    For hub chains:\r\n    ```bash\r\n    forge script script/DeployHubContractsSepolia.s.sol --rpc-url $SEPOLIA_RPC_URL --broadcast\r\n    ```\r\n\r\n    For spoke chains (e.g., Optimism Sepolia):\r\n    ```bash\r\n    forge script script/DeploySpokeContractsOptimismSepolia.s.sol --rpc-url $OPTIMISM_SEPOLIA_RPC_URL --broadcast\r\n    ```\r\n\r\n## Configuration\r\n\r\nWhen deploying MultiGov, several key parameters need to be set. Here are the most important configuration points:\r\n\r\n### Hub Governor Key Parameters\r\n\r\n- `initialVotingDelay` ++&quot;uint256&quot;++ - the delay measured in seconds before voting on a proposal begins. For example, `86400` is one day\r\n- `initialProposalThreshold`  ++&quot;uint256&quot;++ - the number of tokens needed to create a proposal\r\n- `initialQuorum` ++&quot;uint256&quot;++ - the minimum number of votes needed for a proposal to be successful\r\n- `initialVoteWeightWindow` ++&quot;uint256&quot;++ - a window where the minimum checkpointed voting weight is taken for a given address. The window ends at the vote start for a proposal and begins at the vote start minus the vote weight window. The voting window is measured in seconds, e.g., `86400` is one day\r\n\r\n    !!! note\r\n        This helps mitigate cross-chain double voting.\r\n\r\n### Hub Proposal Extender Key Parameters\r\n\r\n- `extensionDuration` ++&quot;uint256&quot;++ - the amount of time, in seconds, for which target proposals will be extended. For example, `10800` is three hours\r\n- `minimumExtensionDuration` ++&quot;uint256&quot;++ - lower time limit, in seconds, for extension duration. For example, `3600` is one hour\r\n\r\n### Spoke Vote Aggregator Key Parameters\r\n\r\n- `initialVoteWindow` ++&quot;uint256&quot;++ - the moving window in seconds for vote weight checkpoints. These checkpoints are taken whenever an address that is delegating sends or receives tokens. For example, `86400` is one day\r\n\r\n    !!! note\r\n        This is crucial for mitigating cross-chain double voting\r\n\r\n### Hub Evm Spoke Vote Aggregator Key Parameters\r\n\r\n- `maxQueryTimestampOffset` ++&quot;uint256&quot;++ - the max timestamp difference, in seconds, between the requested target time in the query and the current block time on the hub. For example, `1800` is 30 minutes\r\n\r\n### Updateable Governance Parameters\r\n\r\nThe following key parameters can be updated through governance proposals:\r\n\r\n- `votingDelay` - delay before voting starts (in seconds)\r\n- `votingPeriod` - duration of the voting period (in seconds)\r\n- `proposalThreshold` - threshold for creating proposals (in tokens)\r\n- `quorum` - number of votes required for quorum\r\n- `extensionDuration` - the amount of time for which target proposals will be extended (in seconds)\r\n- `voteWeightWindow` - window for vote weight checkpoints (in seconds)\r\n- `maxQueryTimestampOffset` - max timestamp difference allowed between a query&#x27;s target time and the hub&#x27;s block time\r\n\r\nThese parameters can be queried using their respective getter functions on the applicable contract.\r\n\r\nTo update these parameters, a governance proposal must be created, voted on, and executed through the standard MultiGov process.\r\n--- END CONTENT ---\r\n\r\nDoc-Content: https://wormhole.com/docs/build/multigov/deploy-to-solana/\r\n--- BEGIN CONTENT ---\r\n---\r\ntitle: MultiGov Deployment to Solana\r\ndescription: Learn how to deploy the MultiGov Staking Program on Solana, including setup, funding, deployment, and configuration steps. \r\n---\r\n\r\n# Deploy MultiGov on Solana  \r\n\r\nThis guide provides instructions on how to set up and deploy the **MultiGov Staking Program** on Solana. Before proceeding with the deployment, ensure that MultiGov aligns with your project&#x27;s governance needs by reviewing the system [architecture](/docs/learn/governance/architecture/){target=\\_blank}.\r\n\r\nOnce your project setup is complete, follow this guide to configure, compile, and deploy the necessary Solana programs and supporting accounts. This deployment enables decentralized governance participation on Solana as a spoke chain within the MultiGov system.  \r\n\r\n## Prerequisites \r\n\r\nTo deploy MultiGov on Solana, ensure you have the following installed:  \r\n\r\n - Install [Git](https://git-scm.com/downloads){target=\\_blank}  \r\n - Install [Node.js](https://nodejs.org/){target=\\_blank} **`v20.10.0`**\r\n - Install [Solana CLI](https://docs.anza.xyz/cli/install/){target=\\_blank} **`v1.18.20`**\r\n - Install [Anchor](https://www.anchor-lang.com/docs/installation){target=\\_blank} **`v0.30.1`**\r\n - Install [Rust](https://www.rust-lang.org/tools/install){target=\\_blank} **`v1.80.1`**\r\n - Install [Docker](https://www.docker.com/get-started/){target=\\_blank}\r\n - Clone the repository:  \r\n    ```bash\r\n    git clone https://github.com/wormhole-foundation/multigov.git  \r\n    cd multigov/solana/\r\n    ```\r\n\r\n## Build the Project\r\n\r\nTo create a verifiable build of the MultiGov Staking Program, run the following command:    \r\n\r\n```bash\r\n./scripts/build_verifiable_staking_program.sh\r\n```\r\n\r\nOnce the build is complete, the compiled artifacts will be available in the `target` folder.\r\n\r\n## Set Up the Deployer Account\r\n\r\nFor a successful deployment, you need a funded deployer account on Solana. This account will store the program and execute deployment transactions. \r\n\r\nIn this section, you will create a new keypair, check the account balance, and ensure it has enough SOL tokens to cover deployment costs. If needed, you can fund the account using different methods before deploying. \r\n\r\n### Generate a New Keypair  \r\n\r\nTo create a new keypair and save it to a file, run the following command:  \r\n\r\n```bash\r\nsolana-keygen new --outfile ./app/keypairs/deployer.json\r\n```\r\n\r\n### Check the Deployer Account Address  \r\n\r\nTo retrieve the public address of the newly created keypair, run the following command:  \r\n\r\n```bash\r\nsolana address -k ./app/keypairs/deployer.json\r\n```\r\n\r\n### Check the Deployer Account Balance  \r\n\r\nTo verify the current balance of the deployer account, run the following command:  \r\n\r\n```bash\r\nsolana balance -k ./app/keypairs/deployer.json\r\n```\r\n\r\n!!! warning \r\n    When deploying the MultiGov Staking Program, the deployer account must have enough SOL to cover deployment costs and transaction fees.\r\n\r\n    - 7.60219224 SOL for deployment costs\r\n    - 0.00542 SOL for transaction fees\r\n\r\n### Fund the Deployer Account  \r\n\r\nIf the account does not have enough SOL, use one of the following methods to add funds.  \r\n\r\n - **Transfer SOL from another account** - if you already have SOL in another account, transfer it using a wallet (Phantom, Solflare, etc.) or in the terminal \r\n\r\n    ```bash\r\n    solana transfer &lt;deployer_account_address&gt; &lt;amount&gt; --from /path/to/funder.json\r\n    ```\r\n\r\n - **Request an airdrop (devnet only)** - if deploying to devnet, you can request free SOL\r\n\r\n    ```bash\r\n    solana airdrop 2 -k ./app/keypairs/deployer.json\r\n    ```\r\n\r\n - **Use a Solana faucet (devnet only)** - you can use online faucets to receive 10 free SOL\r\n\r\n    - [Solana Faucet](https://faucet.solana.com/){target=\\_blank}\r\n\r\n## Deploy the MultiGov Staking Program\r\n\r\nWith the deployer account set up and funded, you can deploy the MultiGov Staking Program to the Solana blockchain. This step involves deploying the program, verifying the deployment, and ensuring the necessary storage and metadata are correctly configured. Once the IDL is initialized, the program will be ready for further setup and interaction.\r\n\r\n### Deploy the Program  \r\n\r\nDeploy the MultiGov Staking Program using Anchor:  \r\n\r\n```bash\r\nanchor deploy --provider.cluster https://api.devnet.solana.com --provider.wallet ./app/keypairs/deployer.json\r\n```\r\n\r\n### Verify the Deployment  \r\n\r\nAfter deployment, check if the program is successfully deployed by running the following command:  \r\n\r\n```bash\r\nsolana program show INSERT_PROGRAM_ID\r\n```\r\n\r\n### Extend Program Storage  \r\n\r\nIf the deployed program requires additional storage space for updates or functionality, extend the program storage using the following command:  \r\n\r\n```bash\r\nsolana program extend INSERT_PROGRAM_ID 800000\r\n```\r\n\r\n### Initialize the IDL  \r\n\r\nTo associate an IDL file with the deployed program, run the following command:  \r\n\r\n```bash\r\nanchor idl init --provider.cluster https://api.devnet.solana.com --filepath ./target/idl/staking.json INSERT_PROGRAM_ID\r\n```\r\n\r\n## Configure the Staking Program\r\n\r\nThe final step after deploying the MultiGov Staking Program is configuring it for proper operation. This includes running a series of deployment scripts to initialize key components and set important governance parameters. These steps ensure that staking, governance, and cross-chain communication function as expected.\r\n\r\n### Run Deployment Scripts  \r\n\r\nAfter deploying the program and initializing the IDL, execute the following scripts **in order** to set up the staking environment and necessary accounts.  \r\n\r\n1. Initialize the MultiGov Staking Program with default settings:\r\n\r\n    ```bash\r\n    npx ts-node app/deploy/01_init_staking.ts\r\n    ```\r\n\r\n2. Create an Account Lookup Table (ALT) to optimize transaction processing:\r\n\r\n    ```bash\r\n    npx ts-node app/deploy/02_create_account_lookup_table.ts\r\n    ```\r\n\r\n3. Set up airlock accounts:\r\n\r\n    ```bash\r\n    npx ts-node app/deploy/03_create_airlock.ts\r\n    ```\r\n\r\n4. Deploy a metadata collector:\r\n\r\n    ```bash\r\n    npx ts-node app/deploy/04_create_spoke_metadata_collector.ts\r\n    ```\r\n\r\n5. Configure vote weight window lengths:\r\n\r\n    ```bash\r\n    npx ts-node app/deploy/05_initializeVoteWeightWindowLengths.ts\r\n    ```\r\n\r\n6. Deploy the message executor for handling governance messages:\r\n\r\n    ```bash\r\n    npx ts-node app/deploy/06_create_message_executor.ts\r\n    ```\r\n\r\n### Set MultiGov Staking Program Key Parameters  \r\n\r\nWhen deploying MultiGov on Solana, several key parameters need to be set. Here are the most important configuration points:  \r\n\r\n - `maxCheckpointsAccountLimit` ++&quot;u64&quot;++ - the maximum number of checkpoints an account can have. For example, `654998` is used in production, while `15` might be used for testing\r\n - `hubChainId` `u16` - the chain ID of the hub network where proposals are primarily managed. For example, `10002` for Sepolia testnet\r\n - `hubProposalMetadata` ++&quot;[u8; 20]&quot;++ - an array of bytes representing the address of the Hub Proposal Metadata contract on Ethereum. This is used to identify proposals from the hub \r\n - `voteWeightWindowLength` ++&quot;u64&quot;++ - specifies the length of the checkpoint window in seconds in which the minimum voting weight is taken. The window ends at the vote start for a proposal and begins at the vote start minus the vote weight window. The vote weight window helps solve problems such as manipulating votes in a chain \r\n - `votingTokenMint` ++&quot;Pubkey&quot;++ - the mint address of the token used for voting  \r\n - `governanceAuthority` ++&quot;Pubkey&quot;++ - the account&#x27;s public key with the authority to govern the staking system. The `governanceAuthority` should not be the default Pubkey, as this would indicate an uninitialized or incorrectly configured setup\r\n - `vestingAdmin` ++&quot;Pubkey&quot;++ - the account&#x27;s public key for managing vesting operations. The `vestingAdmin` should not be the default Pubkey, as this would indicate an uninitialized or incorrectly configured setup\r\n - `hubDispatcher` ++&quot;Pubkey&quot;++ - the Solana public key derived from an Ethereum address on the hub chain that dispatches messages to the spoke chains. This is crucial for ensuring that only authorized messages from the hub are executed on the spoke\r\n--- END CONTENT ---\r\n\r\nDoc-Content: https://wormhole.com/docs/build/multigov/faq/\r\n--- BEGIN CONTENT ---\r\n---\r\ntitle: MultiGov Technical FAQs\r\ndescription: Find answers to common questions about MultiGov, covering cross-chain governance, technical setup, security, proposal creation, and more.\r\n---\r\n\r\n# FAQs\r\n\r\n## Technical Questions\r\n\r\n### How does MultiGov ensure security in cross-chain communication?\r\n\r\nMultiGov leverages Wormhole&#x27;s robust cross-chain communication protocol. It implements several security measures:\r\n\r\n- Message origin verification to prevent unauthorized governance actions\r\n- Timely and consistent data checks to ensure vote aggregation is based on recent and synchronized chain states\r\n- Authorized participant validation to maintain the integrity of the governance process\r\n- Replay attack prevention by tracking executed messages\r\n\r\n### Can MultiGov integrate with any blockchain?\r\n\r\nMultiGov can potentially integrate with any blockchain supported by Wormhole. However, specific implementations may vary depending on the chain&#x27;s compatibility with the Ethereum Virtual Machine (EVM) and its smart contract capabilities. [See the full list of supported networks](/docs/build/start-building/supported-networks/). The current implementation of MultiGov supports an EVM hub and both the EVM and SVM for spokes.\r\n\r\n### How are votes aggregated across different chains?\r\n\r\nVotes are collected on each spoke chain using each chain&#x27;s `SpokeVoteAggregator`. These votes are then transmitted to the HubVotePool on the hub chain for aggregation and tabulation. The `HubEvmSpokeVoteDecoder` standardizes votes from different EVM chains to ensure consistent processing.\r\n\r\n### Can governance upgrade from a single chain to MultiGov?\r\n\r\nYes! MultiGov can support progressively upgrading from a single-chain governance to MultiGov. Moving to MultiGov requires upgrading the token to NTT and adding Flexible Voting to the original Governor.\r\n\r\n## Usage Questions\r\n\r\n### How can I create a proposal in MultiGov?\r\n\r\nProposals are created on the hub chain using the `HubEvmSpokeAggregateProposer` contract or by calling `propose` on the `HubGovernor`. You need to prepare the proposal details, including targets, values, and calldatas. The proposer&#x27;s voting weight is aggregated across chains using Wormhole queries to determine eligibility.\r\n\r\n### How do I vote on a proposal if I hold tokens on a spoke chain?\r\n\r\nYou can vote on proposals via the `SpokeVoteAggregator` contract on the respective spoke chain where you hold your tokens. The votes are then automatically forwarded to the hub chain for aggregation.\r\n\r\n### How are approved proposals executed across multiple chains?\r\n\r\nWhen a proposal is approved and the timelock period elapses, it&#x27;s first executed on the hub chain. A proposal can include a cross-chain message by including a call to `dispatch` on the `HubMessageDispatcher`, which sends a message to the relevant spoke chains. On each spoke chain, the `SpokeMessageExecutor` receives, verifies, and automatically executes the instructions using the `SpokeAirlock` as the `msg.sender`.\r\n\r\n## Implementation Questions\r\n\r\n### What are the requirements for using MultiGov?\r\n\r\nTo use MultiGov, your DAO must meet the following requirements:\r\n\r\n- **ERC20Votes token** - your DAO&#x27;s token must implement the `ERC20Votes` standard and support `CLOCK_MODE` timestamps for compatibility with cross-chain governance\r\n- **Flexible voting support** - your DAO&#x27;s Governor must support Flexible Voting to function as the Hub Governor. If your existing Governor does not support Flexible Voting, you can upgrade it to enable this feature\r\n\r\n### What do I need to set up MultiGov for my project?\r\n\r\nGet started by filling out the form below:\r\n\r\nhttps://www.tally.xyz/get-started\r\n\r\nTally will reach out to help get your DAO set up with MultiGov.\r\n\r\nTo set up testing MultiGov for your DAO, you&#x27;ll need:\r\n\r\n- [Foundry](https://book.getfoundry.sh/getting-started/installation){target=\\_blank} and [Git](https://git-scm.com/downloads){target=\\_blank} installed\r\n- Test ETH on the testnets you plan to use (e.g., Sepolia for hub, Optimism Sepolia for spoke)\r\n- Modify and deploy the hub and spoke contracts using the provided scripts\r\n- Set up the necessary environment variables and configurations\r\n\r\n### Can MultiGov be used with non-EVM chains?\r\n\r\nThe current implementation is designed for EVM-compatible chains. However, Solana (non-EVM) voting is currently in development and expected to go live after the EVM contracts.\r\n\r\n### How can I customize voting parameters in MultiGov?\r\n\r\nVoting parameters such as voting delay, voting period, proposal threshold, and quorum (and others) can be customized in the deployment scripts (`DeployHubContractsSepolia.s.sol` and `DeploySpokeContractsOptimismSepolia.s.sol` as examples for their respective chains). Make sure to adjust these parameters according to your DAO&#x27;s specific needs before deployment.\r\n\r\nRemember to thoroughly test your MultiGov implementation on testnets before deploying to Mainnet, and have your contracts audited for additional security.\r\n\r\n### How does MultiGov handle potential network issues or temporary chain unavailability?\r\n\r\nMultiGov includes several mechanisms to handle network issues or temporary chain unavailability:\r\n\r\n1. **Asynchronous vote aggregation** - votes are aggregated periodically, allowing the system to continue functioning even if one chain is temporarily unavailable\r\n2. **Proposal extension** - the `HubGovernorProposalExtender` allows trusted actors to extend voting periods if needed, which can help mitigate issues caused by temporary network problems\r\n3. **Wormhole retry mechanism** - Wormhole&#x27;s infrastructure includes retry mechanisms for failed message deliveries, helping ensure cross-chain messages eventually get through\r\n4. **Decentralized relayer network** - Wormhole&#x27;s decentralized network of relayers helps maintain system availability even if some relayers are offline\r\n\r\nHowever, prolonged outages on the hub chain or critical spoke chains could potentially disrupt governance activities. Projects should have contingency plans for such scenarios.\r\n--- END CONTENT ---\r\n\r\nDoc-Content: https://wormhole.com/docs/build/multigov/\r\n--- BEGIN CONTENT ---\r\n---\r\ntitle: Getting Started with MultiGov\r\ndescription: Learn how to get started with MultiGov, from evaluating cross-chain governance needs to deploying with help from the Tally team.\r\n---\r\n\r\n# MultiGov\r\n\r\n## Begin the MultiGov Integration Process\r\n\r\nTake the following steps to get started with a MultiGov integration:\r\n\r\n1. Evaluate if [MultiGov](/docs/learn/governance/) meets your cross-chain governance needs\r\n2. Fill out the intake form on the [Tally website](https://www.tally.xyz/get-started){target=\\_blank}\r\n3. The Tally team will review your application and contact you to discuss implementation details\r\n4. Work with the Tally team to customize and deploy MultiGov for your specific use case\r\n\r\n## Start Building\r\n\r\n&lt;div class=&quot;grid cards&quot; markdown&gt;\r\n\r\n-   :octicons-rocket-16:{ .lg .middle } **Deploy to EVM**\r\n\r\n    ---\r\n\r\n    Set up and deploy MultiGov on EVM chains with step-by-step instructions for configuring, compiling, and deploying smart contracts across chains.\r\n\r\n    [:custom-arrow: Discover how to deploy MultiGov](/docs/build/multigov/deploy-to-evm/)\r\n\r\n-   :octicons-rocket-16:{ .lg .middle } **Deploy to Solana**  \r\n\r\n    ---  \r\n\r\n    Set up and deploy the MultiGov Staking Program on Solana with step-by-step instructions for configuring, funding, deploying, and initializing the program.  \r\n\r\n    [:custom-arrow: Discover how to deploy MultiGov on Solana](/docs/build/multigov/deploy-to-solana/)  \r\n\r\n-   :octicons-file-code-16:{ .lg .middle } **Upgrade MultiGov on EVM Chains**\r\n\r\n    ---\r\n\r\n    Learn the process and key considerations for upgrading MultiGov contracts, ensuring system integrity and careful planning across cross-chain components.\r\n\r\n    [:custom-arrow: Discover how to upgrade MultiGov on EVM Chains](/docs/build/multigov/upgrade-evm/)\r\n\r\n-   :octicons-file-code-16:{ .lg .middle } **Upgrade MultiGov on Solana**  \r\n\r\n    ---  \r\n\r\n    Learn how to upgrade the MultiGov Staking Program on Solana, including updating the program binary, IDL, and more.  \r\n\r\n    [:custom-arrow: Discover how to upgrade MultiGov on Solana](/docs/build/multigov/upgrade-solana/)  \r\n\r\n-   :octicons-question-16:{ .lg .middle } **Technical FAQs**\r\n\r\n    ---\r\n\r\n    Find answers to common technical questions about MultiGov, covering technical setup, security, proposal creation, and more.\r\n\r\n    [:custom-arrow: Find the answer to your technical questions](/docs/build/multigov/faq/)\r\n\r\n&lt;/div&gt;\r\n\r\n## Additional Resources\r\n\r\n&lt;div class=&quot;grid cards&quot; markdown&gt;\r\n\r\n-   :octicons-book-16:{ .lg .middle } **What is MultiGov?**\r\n\r\n    ---\r\n\r\n    Need to familiarize yourself with MultiGov? Discover everything you need to know about MultiGov, Wormhole&#x27;s cross-chain governance solution.\r\n\r\n    [:custom-arrow: Learn the basics](/docs/learn/governance/)\r\n\r\n-   :octicons-checklist-16:{ .lg .middle } **Tutorials**\r\n\r\n    ---\r\n\r\n    Access step-by-step tutorials for executing cross-chain governance actions, including treasury management proposals with MultiGov.\r\n\r\n    [:custom-arrow: Learn by building](/docs/tutorials/multigov/)\r\n\r\n&lt;/div&gt;\r\n--- END CONTENT ---\r\n\r\nDoc-Content: https://wormhole.com/docs/build/multigov/upgrade-evm/\r\n--- BEGIN CONTENT ---\r\n---\r\ntitle: Upgrading MultiGov on EVM\r\ndescription: Learn the process and key considerations for upgrading MultiGov on EVM, ensuring system integrity and careful planning across cross-chain components.\r\n---\r\n\r\n# Upgrade MultiGov Contracts on EVM Chains\r\n\r\nMultiGov is designed to be flexible but stable. Due to the system&#x27;s complexity and cross-chain nature, upgrades should be rare and carefully considered. When upgrades are necessary, they must be meticulously planned and executed to ensure system integrity and continuity.\r\n\r\n## Key Considerations for Upgrades\r\n\r\n- **`HubGovernor`**:\r\n    - Not upgradeable. A new deployment requires redeploying several components of the MultiGov system. Refer to the [Process for Major System Upgrade](#process-for-major-system-upgrade) section for more details \r\n\r\n- **`HubVotePool`**:\r\n    - Can be replaced by setting a new `HubVotePool` on the `HubGovernor`\r\n    - Requires re-registering all spokes on the new `HubVotePool`\r\n    - Must register the query type and implementation for vote decoding by calling `registerQueryType` on the new `HubVotePool` &lt;!-- put registerQueryType link back in once repo is public https://github.com/wormhole-foundation/example-multigov/blob/main/evm/src/HubVotePool.sol#L84 --&gt;\r\n    - A new proposal would have to authorize the governor to use the newly created hub vote pool and will also handle registering the appropriate query decoders and registering the appropriate spoke `SpokeVoteAggregators`\r\n\r\n- **`SpokeMessageExecutor`**:\r\n    - Upgradeable via [UUPS](https://www.rareskills.io/post/uups-proxy){target=\\_blank} proxy pattern\r\n    - Stores critical parameters in `SpokeMessageExecutorStorage`\r\n\r\n- **`HubEvmSpokeAggregateProposer`**:\r\n    - Needs redeployment if `HubGovernor` changes\r\n    - Requires re-registering all spokes after redeployment\r\n\r\n- **`HubProposalMetadata`**:\r\n    - Needs redeployment if `HubGovernor` changes, as it references `HubGovernor` as a parameter\r\n\r\n- **`SpokeMetadataCollector`**:\r\n    - Requires redeployment if the hub chain ID changes or if `HubProposalMetadata` changes\r\n\r\n## Process for Major System Upgrade \r\n\r\n1. **New `HubGovernor` deployment**:\r\n    - Deploy the new `HubGovernor` contract\r\n1. **Component redeployment**:\r\n    - Redeploy `HubEvmSpokeAggregateProposer` with the new `HubGovernor` address\r\n    - Redeploy `HubProposalMetadata` referencing the new `HubGovernor`\r\n    - If hub chain ID changes, redeploy `SpokeMetadataCollector` on all spoke chains\r\n1. **`HubVotePool` update**:\r\n    - Set the new `HubVotePool` on the new `HubGovernor`\r\n    - Register all spokes on the new `HubVotePool`\r\n    - Register the query type and implementation for vote decoding (`HubEvmSpokeVoteDecoder`)\r\n1. **Spoke re-registration**:\r\n    - Re-register all spokes on the new `HubEvmSpokeAggregateProposer`\r\n1. **Verification and testing**:\r\n    - Conduct thorough testing of the new system setup\r\n    - Verify all cross-chain interactions are functioning correctly\r\n1. **System transition and deprecation**:\r\n    - Create a proposal to switch the timelock to the new governor\r\n    - Communicate clearly to the community what changes were made\r\n1. **Monitoring**:\r\n    - Implement a transition period where the new system is closely monitored\r\n    - Address any issues that arise promptly\r\n\r\n## Important Considerations\r\n\r\n- Always prioritize system stability, upgrades should only be performed when absolutely necessary\r\n- Thoroughly audit all new contract implementations before proposing an upgrade\r\n- Account for all affected components across all chains in the upgrade plan\r\n- Provide comprehensive documentation for the community about the upgrade process and any changes in functionality\r\n- Always test upgrades extensively on testnets before implementing in production\r\n--- END CONTENT ---\r\n\r\nDoc-Content: https://wormhole.com/docs/build/multigov/upgrade-solana/\r\n--- BEGIN CONTENT ---\r\n---\r\ntitle: Upgrading MultiGov on Solana\r\ndescription: Learn the process and key considerations for upgrading MultiGov on Solana, ensuring system integrity and careful planning across cross-chain components.\r\n---\r\n\r\n# Upgrade MultiGov Contracts on Solana\r\n\r\nThe MultiGov Staking Program on Solana is designed to be upgradeable while maintaining stability. Upgrades introduce improvements, bug fixes, and new features but must be carefully planned and executed to prevent disruptions. \r\n\r\nThis guide covers the key considerations and step-by-step process for upgrading the MultiGov Staking Program, including updating the program binary, Interface Description Language (IDL), and `HubProposalMetadata` while ensuring cross-chain compatibility.\r\n\r\n## Key Considerations for Upgrades\r\n\r\n- **Program upgradeability** - you can upgrade the MultiGov Staking Program on Solana using the `anchor upgrade` command \r\n    - You need the program&#x27;s new bytecode (`.so` file) and an updated IDL file to reflect any changes in the program&#x27;s interface to complete an upgrade\r\n    - The program&#x27;s authority (deployer) must execute the upgrade\r\n\r\n- **`HubProposalMetadata`** - can be updated without redeploying the entire program. You can do this by invoking the `updateHubProposalMetadata` instruction\r\n    - You must carefully validate updates to `HubProposalMetadata` to ensure compatibility with the existing system\r\n\r\n- **Cross-chain compatibility** - ensure any changes to the Solana program do not break compatibility with the Ethereum-based `HubGovernor` \r\n    - Test upgrades thoroughly on devnet before deploying to mainnet\r\n\r\n## Upgrade the MultiGov Program\r\n\r\nFollow these steps to upgrade the MultiGov Staking Program on Solana:\r\n\r\n1. **Prepare the new program binary** - build the updated program using the provided script\r\n\r\n    ```bash\r\n    ./scripts/build_verifiable_staking_program.sh\r\n    ```\r\n\r\n    The new program binary will be located at:\r\n\r\n    ```bash\r\n    target/deploy/staking.so\r\n    ```\r\n\r\n2. **Upgrade the program** - use the anchor upgrade command to deploy the new program binary\r\n\r\n    ```bash\r\n    anchor upgrade --program-id INSERT_PROGRAM_ID --provider.cluster INSERT_CLUSTER_URL INSERT_PATH_TO_PROGRAM_BINARY\r\n    ```\r\n\r\n    Your completed anchor upgrade command should resemble the following:\r\n    ```bash\r\n    anchor upgrade --program-id DgCSKsLDXXufYeEkvf21YSX5DMnFK89xans5WdSsUbeY --provider.cluster https://api.devnet.solana.com ./target/deploy/staking.so\r\n    ```\r\n\r\n3. **Update the IDL** - after upgrading the program, update the IDL to reflect any changes in the program&#x27;s interface\r\n\r\n    ```bash\r\n    anchor idl upgrade INSERT_PROGRAM_ID --filepath INSERT_PATH_TO_IDL_FILE\r\n    ```\r\n\r\n    Your completed IDL upgrade command should resemble the following:\r\n    ```bash\r\n    anchor idl upgrade --provider.cluster https://api.devnet.solana.com --filepath ./target/idl/staking.json DgCSKsLDXXufYeEkvf21YSX5DMnFK89xans5WdSsUbeY\r\n    ```\r\n\r\n4. **Update `HubProposalMetadata`** - if `HubProposalMetadata` requires an update, run the following script to\nThe file is too long and its contents have been truncated.\n",
          "title": "wormhole.txt",
          "tether_id": null
        },
        "status": "finished_successfully",
        "end_turn": null,
        "weight": 1.0,
        "metadata": {
          "command": "context_stuff",
          "is_visually_hidden_from_conversation": false,
          "request_id": "96323d027ad212ee-ATL",
          "message_type": "next",
          "model_slug": "gpt-4o",
          "default_model_slug": "gpt-4o",
          "parent_id": "ef669fa2-ee0e-4c75-8a6f-c1c0f9d0b6e0",
          "timestamp_": "absolute"
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "ef669fa2-ee0e-4c75-8a6f-c1c0f9d0b6e0",
      "children": [
        "e89389e3-abff-4d12-9db6-547c5c052457"
      ]
    },
    "e89389e3-abff-4d12-9db6-547c5c052457": {
      "id": "e89389e3-abff-4d12-9db6-547c5c052457",
      "message": {
        "id": "e89389e3-abff-4d12-9db6-547c5c052457",
        "author": {
          "role": "tool",
          "name": "file_search",
          "metadata": {}
        },
        "create_time": 1753179983.232012,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            "\nPlease remember to search the user&#x27;s documents if an answer to their question is not contained in the above snippets. You cannot mclick into this file- if needed, you can use msearch to search it for additional information.\n"
          ]
        },
        "status": "finished_successfully",
        "end_turn": null,
        "weight": 1.0,
        "metadata": {
          "is_visually_hidden_from_conversation": false,
          "command": "prompt",
          "request_id": "96323d027ad212ee-ATL",
          "message_type": "next",
          "model_slug": "gpt-4o",
          "default_model_slug": "gpt-4o",
          "parent_id": "e02c455f-7d2b-49bc-90d5-61eec36eeff9",
          "timestamp_": "absolute"
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "e02c455f-7d2b-49bc-90d5-61eec36eeff9",
      "children": [
        "ccf58bb8-6443-4585-9e4d-826aa99be53e"
      ]
    },
    "ccf58bb8-6443-4585-9e4d-826aa99be53e": {
      "id": "ccf58bb8-6443-4585-9e4d-826aa99be53e",
      "message": {
        "id": "ccf58bb8-6443-4585-9e4d-826aa99be53e",
        "author": {
          "role": "assistant",
          "name": null,
          "metadata": {}
        },
        "create_time": 1753179971.904313,
        "update_time": null,
        "content": {
          "content_type": "text",
          "parts": [
            "Wormhole.com is a powerful multichain interoperability platform that offers tools and infrastructure to seamlessly build, transfer, and govern assets and messages across blockchain networks. Here’s a breakdown of what Wormhole offers:\n\n---\n\n### 🌀 **Core Capabilities**\n\n#### 1. **Cross-Chain Messaging**\n- **Core Contracts**: Deployed on multiple chains, allowing smart contracts to send and receive verified messages between blockchains.\n- **Wormhole Relayers**: Handle message delivery across EVM chains without the need for off-chain infrastructure.\n- **Guardian Network**: A decentralized set of nodes that sign and verify messages (VAAs).\n\n#### 2. **Asset Transfers**\n- **Token Bridge**: Transfer wrapped assets across blockchains.\n- **Native Token Transfers (NTT)**: Move native assets without wrapping.\n- **Settlement Layer**: An intent-based system for fast, efficient, and cost-effective cross-chain transfers, leveraging solvers and liquidity.\n\n#### 3. **Multichain Governance (MultiGov)**\n- Enables DAOs to govern across multiple blockchains via a hub-and-spoke architecture.\n- Supports vote aggregation, proposal execution, and secure coordination between chains.\n\n#### 4. **Real-Time Data Access**\n- **Wormhole Queries**: A cross-chain data oracle that lets you query live on-chain data from other chains via a REST interface.\n- Enables smart contracts to access information like account balances or historical data across networks.\n\n---\n\n### 🛠️ **Developer Toolkit**\n- **TypeScript SDK &amp; Solidity SDK**: Build apps that interact with Wormhole&#x27;s protocol.\n- **CLI Tools**: Monitor messages and transactions across chains.\n- **Testnet Faucets**: Easily get tokens for development environments.\n- **Full Documentation**: Comprehensive guides and references across use cases.\n\n---\n\n### 🧩 **Integrations &amp; Use Cases**\n- Build **cross-chain dApps** with seamless contract communication.\n- Create **multichain DAOs** with unified governance logic.\n- Enable **asset portability** and **interoperability** for DeFi, NFTs, and games.\n- Fetch **trustless data** across chains for smart contract execution.\n\n---\n\n### 🚀 Getting Started\n- Use [step-by-step tutorials](https://wormhole.com/docs/tutorials/) for token bridging, cross-chain messaging, and governance setup.\n- Begin building via the [Start Building](https://wormhole.com/docs/build/start-building/) guide.\n- Explore supported chains in the [Supported Networks](https://wormhole.com/docs/build/start-building/supported-networks/) page.\n\n---\n\nWormhole serves as the **cosmic bridge** for Web3 — unlocking the full power of multichain applications with modular, secure, and battle-tested infrastructure.\n\nWould you like guidance for a specific use case—like transferring tokens, building a cross-chain dApp, or using MultiGov?"
          ]
        },
        "status": "finished_successfully",
        "end_turn": true,
        "weight": 1.0,
        "metadata": {
          "finish_details": {
            "type": "stop",
            "stop_tokens": [
              200002
            ]
          },
          "is_complete": true,
          "citations": [],
          "content_references": [],
          "gizmo_id": "g-67f49d3619948191a1baf7b46c1bda18",
          "request_id": "96323d027ad212ee-ATL",
          "message_type": "next",
          "model_slug": "gpt-4o",
          "default_model_slug": "gpt-4o",
          "parent_id": "e89389e3-abff-4d12-9db6-547c5c052457",
          "timestamp_": "absolute"
        },
        "recipient": "all",
        "channel": null
      },
      "parent": "e89389e3-abff-4d12-9db6-547c5c052457",
      "children": []
    }
  },
  "moderation_results": [],
  "current_node": "ccf58bb8-6443-4585-9e4d-826aa99be53e",
  "plugin_ids": null,
  "conversation_id": "687f6743-00cc-832c-afaa-eac79afc5275",
  "conversation_template_id": "g-67f49d3619948191a1baf7b46c1bda18",
  "gizmo_id": "g-67f49d3619948191a1baf7b46c1bda18",
  "gizmo_type": "gpt",
  "is_archived": false,
  "is_starred": null,
  "safe_urls": [
    "https://wormhole.com/docs/learn/infrastructure/vaas/",
    "https://docs.anza.xyz/cli/install/",
    "https://wormhole.com/docs/build/toolkit/typescript-sdk/",
    "https://wormhole.com/docs/learn/governance/",
    "https://github.com/wormhole-foundation/wormhole/blob/v{{repositories.wormhole.version}}/sdk/js/src/relayer/relayer/send.ts#L33",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/configuration/rate-limiting/",
    "https://wormhole.com/docs/tutorials/by-product/wormhole-sdk/",
    "https://wormhole.com/docs/build/multigov/deploy-to-evm/",
    "https://wormhole.com/docs/learn/transfers/cctp/",
    "https://www.rust-lang.org/tools/install",
    "https://wormhole.com/docs/learn/glossary/",
    "https://docs.rs/anchor-lang/0.29.0/anchor_lang/context/struct.CpiContext.html",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/deploy-to-evm/",
    "https://github.com/wormhole-foundation/wormhole/blob/main/relayer/ethereum/contracts/interfaces/relayer/IWormholeRelayer.sol",
    "https://wormhole.com/docs/tutorials/by-product/",
    "https://wormhole.com/docs/build/transfers/settlement/liquidity-layer/",
    "https://wormhole.com/docs/learn/infrastructure/",
    "https://docs.rs/wormhole-anchor-sdk/latest/wormhole_anchor_sdk/wormhole/instructions/struct.PostMessage.html",
    "https://wormhole.com/docs/build/multigov/",
    "https://github.com/wormhole-foundation/multigov",
    "https://wormhole.com/docs/learn/",
    "https://wormhole.com/docs/learn/governance/faq/",
    "https://wormhole.com/docs/build/core-messaging/wormhole-relayers/",
    "https://wormhole.com/docs/build/start-building/supported-networks/",
    "https://wormhole.com/docs/build/transfers/connect/features/",
    "https://wormhole.com/docs/learn/infrastructure/relayer/",
    "https://www.anchor-lang.com/docs/installation",
    "https://wormhole.com/docs/learn/infrastructure/guardians/",
    "https://wormhole.com/docs/build/reference/chain-ids/",
    "https://wormhole.com/docs/build/toolkit/faqs/",
    "https://docs.solana.com/developing/runtime-facilities/programs#secp256k1-program",
    "https://wormhole.com/docs/build/toolkit/",
    "https://github.com/wormhole-foundation/wormhole/blob/main/ethereum/contracts/interfaces/IWormhole.sol",
    "https://wormhole.com/docs/build/toolkit/typescript-sdk/vaas-protocols/",
    "https://wormhole.com/docs/learn/governance/architecture/",
    "https://wormhole.com/docs/learn/transfers/settlement/",
    "https://wormhole.com/docs/tutorials/by-product/connect/react-dapp/",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/post-deployment/",
    "https://wormhole.com/docs/build/toolkit/typescript-sdk/wormhole-sdk/",
    "https://wormhole.com/docs/build/transfers/settlement/",
    "https://wormhole.com/docs/build/multigov/faq/",
    "https://wormhole.com/docs/build/reference/wormhole-formatted-addresses/",
    "https://docs.wormholescan.io/",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/faqs/",
    "https://github.com/wormhole-foundation/wormhole-scaffolding/tree/main/evm/src/01_hello_world",
    "https://wormhole.com/docs/build/queries/faqs/",
    "https://wormhole.com/docs/",
    "https://wormhole.com/docs/build/toolkit/cli/",
    "https://wormhole.com/docs/infrastructure/relayers/",
    "https://wormhole.com/docs/build/transfers/settlement/solver/",
    "https://wormhole.com/docs/learn/transfers/native-token-transfers/architecture/",
    "https://wormhole.com/docs/build/reference/consistency-levels/",
    "https://wormhole.com/docs/build/multigov/upgrade-solana/",
    "https://wormhole.com/docs/learn/transfers/native-token-transfers/",
    "https://wormhole.com/docs/infrastructure/spy/run-spy/",
    "https://wormhole.com/docs/learn/transfers/native-token-transfers/security/",
    "https://github.com/wormhole-foundation/wormhole/blob/main/relayer/ethereum/contracts/interfaces/relayer/IWormholeReceiver.sol",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/evm-launchpad/",
    "https://wormhole.com/docs/build/",
    "https://wormhole.com/docs/tutorials/by-product/multichain-assets/",
    "https://wormhole.com/docs/learn/transfers/native-token-transfers/overview/",
    "https://github.com/wormhole-foundation/wormhole/tree/main/terra/contracts/wormhole",
    "https://wormhole.com/docs/build/transfers/connect/faqs/",
    "https://wormhole.com/docs/tutorials/",
    "https://wormhole.com/docs/tutorials/by-product/settlements/.index/",
    "https://wormhole.com/docs/infrastructure/spy/",
    "https://book.getfoundry.sh/getting-started/installation",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/installation/",
    "https://wormhole.com/docs/tutorials/by-product/connect/",
    "https://wormhole.com/docs/build/queries/",
    "https://wormhole.com/docs/build/queries/use-queries/",
    "https://api.devnet.solana.com",
    "https://github.com/wormhole-foundation/wormhole/tree/main/near/contracts/wormhole",
    "https://www.tally.xyz/get-started",
    "https://github.com/wormhole-foundation/example-multigov/blob/main/evm/src/HubVotePool.sol#L84",
    "https://www.rareskills.io/post/uups-proxy",
    "https://wormhole.com/docs/build/toolkit/typescript-sdk/sdk-layout/",
    "https://wormhole.com/docs/build/transfers/connect/upgrade/",
    "https://wormhole.com/docs/tutorials/by-product/multigov/",
    "https://github.com/wormhole-foundation/wormhole/tree/main/ethereum/contracts",
    "https://github.com/wormhole-foundation/wormhole-solidity-sdk",
    "https://wormhole.com/docs/build/transfers/connect/routes/",
    "https://wormhole.com/docs/learn/transfers/token-bridge/",
    "https://wormhole.com/docs/tutorials/by-product/wormhole-sdk/usdc-via-cctp/",
    "https://wormhole.com/docs/build/multigov/deploy-to-solana/",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/configuration/access-control/",
    "https://wormhole.com/docs/build/queries/overview/",
    "https://wormhole.com/docs/build/toolkit/typescript-sdk/protocols-payloads/",
    "https://wormhole.com/docs/learn/infrastructure/core-contracts/",
    "https://wormhole.com/docs/learn/transfers/",
    "https://wormhole.com/docs/build/reference/contract-addresses/",
    "https://git-scm.com/downloads",
    "https://wormhole.com/docs/build/transfers/cctp/",
    "https://wormhole.com/docs/build/toolkit/solidity-sdk/",
    "https://wormhole.com/docs/tutorials/by-product/wormhole-sdk/tokens-via-token-bridge/",
    "https://wormhole.com/docs/build/start-building/use-cases/",
    "https://wormhole.com/docs/build/transfers/connect/configuration/configure-theme/",
    "https://wormhole.com/docs/learn/governance/overview/",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/",
    "https://github.com/wormhole-foundation/wormhole/blob/main/algorand/wormhole_core.py",
    "https://wormhole.com/docs/learn/transfers/settlement/architecture/",
    "https://wormhole.com/docs/infrastructure/",
    "https://wormhole.com/docs/learn/transfers/settlement/overview/",
    "https://wormhole.com/docs/build/start-building/",
    "https://www.docker.com/get-started/",
    "https://wormhole.com/docs/tutorials/by-product/multichain-assets/multichain-token/",
    "https://wormhole.com/docs/build/core-messaging/core-contracts/",
    "https://wormhole.com/docs/learn/security/",
    "https://nodejs.org/",
    "https://wormhole.com/docs/build/toolkit/dev-env/",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/configuration/",
    "https://wormhole.com/docs/infrastructure/relayers/run-relayer/",
    "https://wormhole.com/docs/tutorials/by-product/wormholescan/replace-signatures/",
    "https://wormhole.com/docs/tutorials/by-product/settlements/.settlement-routes/",
    "https://github.com/wormhole-foundation/multigov.git",
    "https://wormhole.com/docs/build/transfers/connect/overview/",
    "https://faucet.solana.com/",
    "https://github.com/wormhole-foundation/wormhole/tree/main/aptos/wormhole",
    "https://wormhole.com/docs/build/multigov/upgrade-evm/",
    "https://wormhole.com/docs/build/transfers/",
    "https://wormhole.com/docs/learn/infrastructure/architecture/",
    "https://wormhole.com/docs/learn/transfers/native-token-transfers/deployment/",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/deploy-to-solana/",
    "https://wormhole.com/docs/tutorials/by-product/contract-integrations/cross-chain-contracts/",
    "https://wormhole.com/docs/build/start-building/testnet-faucets/",
    "https://wormhole.com/docs/build/reference/",
    "https://wormhole.com/docs/learn/introduction/",
    "https://wormhole.com/docs/build/transfers/token-bridge/",
    "https://wormhole.com/docs/build/transfers/connect/configuration/",
    "https://wormhole.com/docs/build/transfers/connect/configuration/configure-data/",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/deployment-process/troubleshooting/",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/managers-transceivers/",
    "https://wormhole.com/docs/build/transfers/native-token-transfers/cli-commands/",
    "https://wormhole.com/docs/tutorials/by-product/contract-integrations/",
    "https://github.com/wormhole-foundation/wormhole-relayer-solidity-sdk/blob/main/src/interfaces/IWormholeReceiver.sol",
    "https://github.com/wormhole-foundation/wormhole/tree/main/sui/wormhole",
    "https://wormhole.com/docs/tutorials/by-product/multigov/treasury-proposal/",
    "https://wormhole.com/docs/tutorials/by-product/wormholescan/",
    "https://github.com/wormhole-foundation/wormhole/tree/main/solana/bridge/program",
    "https://wormhole.com/docs/learn/infrastructure/spy/",
    "https://wormhole.com/docs/build/core-messaging/",
    "https://wormhole.com/docs/build/transfers/connect/",
    "https://github.com/wormhole-foundation/wormhole/blob/main/relayer/ethereum/contracts/interfaces/relayer/IDeliveryProvider.sol",
    "https://wormhole.com/docs/tutorials/by-product/contract-integrations/cross-chain-token-contracts/",
    "https://wormhole.com/docs/build/transfers/connect/configuration-v0/",
    "https://wormhole.com/docs/build/transfers/settlement/faqs/",
    "https://github.com/wormhole-foundation/wormhole-scaffolding/tree/main/solana/programs/01_hello_world",
    "https://wormhole.com/docs/build/start-building/products/"
  ],
  "blocked_urls": [],
  "default_model_slug": "gpt-4o",
  "conversation_origin": null,
  "voice": null,
  "async_status": null,
  "disabled_tool_ids": [],
  "is_do_not_remember": false,
  "memory_scope": "global_enabled",
  "sugar_item_id": null,
  "sugar_item_visible": false,
  "is_study_mode": false,
  "owner": null,
  "id": "687f6743-00cc-832c-afaa-eac79afc5275"
}